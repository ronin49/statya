Задорожний Олег Андрійович

https://orcid.org/0009-0000-8183-3677


Розробка програмних засобів для проектного менеджменту

Анотація.
У статті розглядається підход до розробки програмних засобів для управління проєктами (проектного менеджменту).
Визначено основні функціональні вимоги до таких систем.
Проведено аналіз популярних програмних продуктів, що використовуються у сфері проєктного менеджменту, таких як Jira, Trello, Microsoft Project.
Особливу увагу приділено критеріям вибору інструментів залежно від масштабу проєкту та специфіки команди.
Наведено приклад реалізації власного програмного засобу для керування проєктами із застосуванням сучасних технологій.
Результати дослідження можуть бути корисними для ІТ-фахівців, менеджерів та розробників програмного забезпечення.

Ключові слова: управління проєктами, програмне забезпечення, планування, контроль завдань, розробка систем, проєктний менеджмент.

Постановка проблеми
У сучасних умовах високої конкуренції та динамічного розвитку ІТ-сфери ефективне управління проєктами стає критично важливим фактором успіху організацій.
Незважаючи на наявність широкого спектра інструментів для проектного менеджменту, багато з них або надто складні у використанні, або не відповідають специфічним потребам окремих команд чи галузей.
Часто виявляється, що існуюче програмне забезпечення не забезпечує належного рівня інтеграції, масштабованості чи гнучкості, що обмежує його ефективність у практичному застосуванні.
Крім того, для малих і середніх проєктів нерідко бракує доступних, адаптивних рішень із достатнім функціоналом для базового управління задачами, термінами та ресурсами.
Це зумовлює потребу у створенні нових програмних засобів, які були б орієнтовані на конкретні потреби користувачів, мали зручний інтерфейс, можливість кастомізації та підтримку сучасних методологій управління проєктами, таких як Agile, Scrum чи Kanban.
Таким чином, актуальність дослідження полягає в необхідності розробки та вдосконалення програмних засобів, що дозволяють ефективно вирішувати завдання проектного менеджменту, враховуючи як технічні, так і організаційні особливості сучасних проєктів.

Мета статті
Метою статті є дослідження сучасних підходів до розробки програмних засобів для управління проєктами, аналіз існуючих інструментів проектного менеджменту та обґрунтування доцільності створення власного програмного продукту, який би відповідав актуальним вимогам користувачів.
У рамках дослідження передбачається визначити ключові функціональні характеристики, які повинні мати ефективні програмні засоби, а також запропонувати концептуальну модель такого інструменту із урахуванням потреб різних категорій користувачів — від малих команд до великих організацій.

Аналіз основних досліджень і публікацій

У сучасній науковій літературі питання розробки та впровадження програмних засобів для управління проєктами розглядаються як у контексті ІТ-індустрії, так і в освітньому середовищі.
Дослідження Свінцицької О.М. та Пулеко І.В. [14] присвячене інтеграції інструментів Atlassian (Jira, Bitbucket, Sourcetree) в управління ІТ-проєктами.
Автори демонструють, що поєднання цих інструментів дозволяє ефективно реалізовувати автоматизацію процесів CI/CD, спрощує управління задачами, релізами та забезпечує інтеграцію з системами контролю версій, що є особливо важливим для командної розробки програмного забезпечення.
Руденко Ю. та співавтори [15] аналізують досвід використання Trello як інструменту для організації проектної діяльності в освітньому процесі.
Вони підкреслюють простоту використання та ефективність Kanban-методу у створенні спільного середовища для студентських проєктів.
Досвід використання Trello в Сумському національному аграрному університеті свідчить про його ефективність як у навчальному процесі, так і в адмініструванні кафедри.
Радкевич О. [16] у своїй роботі розглядає програмні засоби для управління проєктами в контексті професійної (професійно-технічної) освіти.
Автор виокремлює основні функції таких систем, зокрема планування, контроль ресурсів, обмін документами, інтеграцію календарів і контактів, а також аналізує такі продукти, як Microsoft Project, Trello та Bitrix24.
Окрему увагу приділено методам візуалізації (Gantt-діаграми, критичний шлях), які є ключовими для ефективного управління проектами в закладах освіти.
Важливо зазначити, що незважаючи на значну кількість досліджень, значна частина з них зосереджена на аналізі окремих інструментів без системного порівняння їх ефективності в різних умовах використання або на досвіді впровадження в конкретних організаціях.
Це відкриває перспективи для подальших досліджень, зокрема в напрямку створення універсальних або адаптивних програмних продуктів, що поєднують переваги різних систем і враховують специфіку окремих галузей.

==Виклад основного матеріалу 
===Мікросервісна архітектура в системах управління проєктами
Мікросервісна архітектура (microservice architecture) є сучасним підходом до проєктування програмного забезпечення, за якого функціональність системи розбивається на низку незалежних сервісів, кожен з яких виконує чітко визначену задачу.
У контексті розробки програмних засобів для управління проєктами, мікросервісна архітектура забезпечує високу масштабованість, гнучкість та адаптивність системи до змін вимог користувачів.
Кожен мікросервіс має власну базу даних та API, може розгортатися і оновлюватися незалежно від інших компонентів.
Наприклад, у системі проектного менеджменту окремі мікросервіси можуть відповідати за:
управління завданнями;
керування користувачами та ролями;
відслідковування термінів (deadline tracking);
інтеграцію з зовнішніми сервісами (Slack, GitHub, CI/CD тощо);
аналітику та звітність.
Використання мікросервісного підходу забезпечує:
гнучкість в обслуговуванні та розвитку продукту, адже оновлення одного сервісу не потребує зупинки всієї системи;
стійкість до збоїв, оскільки вихід з ладу одного мікросервісу не впливає на роботу інших;
можливість вибору оптимальної технології для кожного сервісу (наприклад, Python для обробки аналітики, Node.js для API, Go для сервісів з високим навантаженням).
Проте впровадження мікросервісної архітектури також має свої виклики: потребу в ефективному моніторингу, логуванні, складності в налагодженні міжсервісної комунікації (часто через REST або gRPC), та використанні таких інструментів, як Docker, Kubernetes, API Gateway, сервіс-меш (наприклад, Istio).
У підсумку, мікросервісна архітектура є доцільним вибором для побудови масштабованих систем проектного менеджменту, особливо якщо вони передбачають активний розвиток, інтеграцію з іншими сервісами та велику кількість одночасних користувачів.
===Використання SQL у програмних засобах управління проєктами
Одним із ключових компонентів будь-якої системи управління проєктами є база даних, яка забезпечує зберігання, обробку та доступ до інформації про користувачів, завдання, етапи, дедлайни, ресурси тощо.
Для реалізації цього рівня зазвичай використовуються реляційні бази даних з мовою структурованих запитів SQL (Structured Query Language).
Основні функції SQL у системі проектного менеджменту:
Створення структури даних (таблиці для зберігання проєктів, завдань, користувачів, ролей, коментарів тощо).
Зв’язки між сутностями (наприклад, один проєкт — багато завдань; одне завдання — багато коментарів).
Запити на читання (наприклад, отримати всі завдання проєкту, що мають статус "у процесі").
Запити на оновлення та видалення (зміна статусу завдання, видалення застарілих даних).
Агрегація даних (обчислення кількості завершених завдань, загального часу виконання тощо).
Приклад таблиці для зберігання інформації про завдання:
```
CREATE TABLE tasks (
    id INT PRIMARY KEY AUTO_INCREMENT,
    project_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('нове', 'в процесі', 'завершено') DEFAULT 'нове',
    assignee_id INT,
    deadline DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id),
    FOREIGN KEY (assignee_id) REFERENCES users(id)
);
```
Приклад запиту для отримання завдань із дедлайном у найближчі 3 дні:
```
SELECT title, deadline 
FROM tasks 
WHERE status != 'завершено' 
  AND deadline BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 DAY);
```
У мікросервісній архітектурі кожен сервіс може мати свою окрему базу даних, але між ними зберігаються логічні зв’язки через API.
У монолітних системах — спільна база даних дозволяє централізовано керувати всією інформацією.
Також сучасні СУБД (MySQL, PostgreSQL, MariaDB) дозволяють реалізовувати складні логіки за допомогою stored procedures, triggers, views, що може бути корисно для автоматизації процесів, таких як нагадування про дедлайни або перевірка консистентності даних.
===Використання C++ у розробці програмних засобів проектного менеджменту
Мова програмування C++ залишається актуальною при створенні продуктивних і високонадійних програмних рішень, особливо у випадках, коли потрібна висока швидкість виконання, контроль над пам’яттю або розробка десктопних застосунків із широкими можливостями інтеграції.
Переваги використання C++:
Висока продуктивність: підходить для обробки великих обсягів даних, що може бути корисним у великих проєктних системах.
Портативність: програми можуть бути скомпільовані під різні ОС (Windows, Linux, macOS).
Можливість інтеграції з базами даних, бібліотеками для побудови GUI (наприклад, Qt) або серверного API.
Гнучкість: легко реалізовуються як консольні інструменти, так і складні графічні інтерфейси.
Приклад: структура даних для зберігання завдань проєкту
```
struct Task {
    int id;
    std::string title;
    std::string description;
    std::string status; // "нове", "в процесі", "завершено"
    std::string deadline;
    
    void print() const {
        std::cout << "Завдання: " << title << "\nСтатус: " << status << "\n";
    }
};
```
Приклад: взаємодія з базою даних (наприклад, через MySQL Connector/C++)
```
#include <mysql_driver.h>
#include <mysql_connection.h>

void insertTask(const Task& task) {
    sql::mysql::MySQL_Driver* driver;
    sql::Connection* con;
    sql::PreparedStatement* pstmt;

    driver = sql::mysql::get_mysql_driver_instance();
    con = driver->connect("tcp://127.0.0.1:3306", "user", "password");
    con->setSchema("project_manager");

    pstmt = con->prepareStatement("INSERT INTO tasks(title, description, status, deadline) VALUES (?, ?, ?, ?)");
    pstmt->setString(1, task.title);
    pstmt->setString(2, task.description);
    pstmt->setString(3, task.status);
    pstmt->setString(4, task.deadline);
    pstmt->execute();

    delete pstmt;
    delete con;
}
```
Застосування C++ у мікросервісах або десктопних додатках
C++ + Qt — для створення GUI-додатків управління проектами.
C++ + gRPC/REST — у серверній частині мікросервісу.
C++ + Boost/Asio — для побудови мережевих застосунків, систем сповіщення, логування тощо.
===Застосування Apache Thrift у програмних засобах проектного менеджменту
Apache Thrift — це фреймворк, який дозволяє будувати міжмовні (multilanguage) сервіси для віддаленого виклику процедур (RPC).
Він був розроблений у Facebook як засіб ефективної та масштабованої взаємодії між компонентами систем, написаними на різних мовах програмування (C++, Python, Java, Go тощо).
У складних програмних продуктах, зокрема в тих, що реалізовані за принципами мікросервісної архітектури, окремі сервіси можуть бути реалізовані на різних мовах або функціонувати як автономні частини.
Thrift забезпечує швидке, типізоване, безпечне та зручне з’єднання між ними.
Основні переваги використання Thrift:
Міжмовна сумісність — дозволяє взаємодію, наприклад, між бекендом на C++ і фронтендом на JavaScript або Python.
Автоматична генерація коду — Thrift-файли описують структуру даних і сервіси, на основі яких утворюються клієнти та сервери.
Швидкість — двійковий протокол Thrift дуже продуктивний і підходить для систем з високим навантаженням.
Гнучкість — підтримує як синхронний, так і асинхронний режим, а також обирається транспорт (TCP, HTTP, файловий).
Приклад: опис Thrift-сервісу для управління завданнями
```
namespace cpp ProjectManager

struct Task {
  1: i32 id,
  2: string title,
  3: string description,
  4: string status,
  5: string deadline
}

service ProjectService {
  void addTask(1: Task task),
  list<Task> getTasks(),
  Task getTaskById(1: i32 id),
  void updateTaskStatus(1: i32 id, 2: string newStatus)
}
```
Генерація коду:
```
thrift --gen cpp project_service.thrift
```
Це створить набір C++-класів для реалізації сервісу та клієнта.
Завдяки Thrift можна:
реалізувати окремий сервіс задач, до якого підключаються інші сервіси (аналітика, нагадування, аутентифікація);
використовувати його як зовнішнє API до сервера, надаючи доступ мобільним або десктопним клієнтам;
будувати внутрішню взаємодію між частинами мікросервісної системи, зокрема, якщо одні частини реалізовані на C++, а інші — на Python або Node.js.
Використання Apache Thrift у програмних засобах управління проєктами забезпечує високу гнучкість, масштабованість і сумісність між компонентами системи.
Це особливо важливо в умовах, коли система має розподілений характер і активно інтегрується з іншими сервісами.
===Обрана архітектура
/:file:arch.png
===Структура таблиці завдань
/:file:schema.png
===Імлементація в коді
https://github.com/ronin49/statya

Висновки
У статті проаналізовано сучасні підходи до розробки програмних засобів для управління проєктами та охарактеризовано актуальні інструменти, які застосовуються в цій галузі.
Встановлено, що ефективність управління проєктами значною мірою залежить від правильного вибору програмного забезпечення, його функціональних можливостей, зручності використання, підтримки командної роботи та інтеграції з іншими сервісами.
Окрему увагу приділено мікросервісній архітектурі як перспективному підходу до побудови гнучких і масштабованих систем управління проєктами.
Також розглянуто роль мови C++ у створенні високопродуктивних модулів і можливості використання SQL для зберігання й обробки даних.
Застосування Apache Thrift обґрунтовано як ефективного засобу для міжмовної взаємодії в рамках розподіленої системи.
Проведений аналіз публікацій засвідчує, що попри наявність широкого спектра рішень, існує потреба в адаптованих інструментах, які б враховували специфіку конкретних команд, галузей або навчального процесу.
Тому подальші дослідження доцільно спрямувати на розробку кастомізованих, легко масштабованих і безпечних програмних засобів із відкритою архітектурою та можливістю інтеграції зі сторонніми системами.

Список літератури
Свінцицька О.М., Пулеко І.В. Інтеграція Jira, Bitbucket та Sourcetree в системі управління ІТ-проєктами // Технічна інженерія. – 2023. – №2(92). – С. 102–108. DOI: https://doi.org/10.26642/ten-2023-2(92)-102-108.
Руденко Ю., Агаджанов-Гонсалес К., Агаджанова С., Баталова А. Використання сервісу Trello в освітньому процесі університету // Освіта. Інноватика. Практика. – 2023. – Т. 11, №7. – С. 92–97. DOI: 10.31110/2616-650X-vol11i7-012.
Radkevych O. Project Management Software in the Field of Professional (Vocational) Education // Scientific Herald of the Institute of Vocational Education and Training of NAES of Ukraine. Professional Pedagogy. – 2019. – No. 2(19). – P. 124–132. DOI: 10.32835/2223-5752.2019.19.124-132.
Apache Thrift – The Apache Software Foundation. [Online resource] – URL: https://thrift.apache.org (дата звернення: 06.08.2025).
ISO/IEC 19510:2013. Information technology — Object Management Group Business Process Model and Notation. – https://www.iso.org/standard/62652.html

