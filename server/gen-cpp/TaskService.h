/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TaskService_H
#define TaskService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "api_types.h"

namespace TaskService {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TaskServiceIf {
 public:
  virtual ~TaskServiceIf() {}
  virtual void getTaskById(Task& _return, const int32_t id) = 0;
  virtual void addTask(const Task& t) = 0;
};

class TaskServiceIfFactory {
 public:
  typedef TaskServiceIf Handler;

  virtual ~TaskServiceIfFactory() {}

  virtual TaskServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TaskServiceIf* /* handler */) = 0;
  };

class TaskServiceIfSingletonFactory : virtual public TaskServiceIfFactory {
 public:
  TaskServiceIfSingletonFactory(const ::std::shared_ptr<TaskServiceIf>& iface) : iface_(iface) {}
  virtual ~TaskServiceIfSingletonFactory() {}

  virtual TaskServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(TaskServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<TaskServiceIf> iface_;
};

class TaskServiceNull : virtual public TaskServiceIf {
 public:
  virtual ~TaskServiceNull() {}
  void getTaskById(Task& /* _return */, const int32_t /* id */) override {
    return;
  }
  void addTask(const Task& /* t */) override {
    return;
  }
};

typedef struct _TaskService_getTaskById_args__isset {
  _TaskService_getTaskById_args__isset() : id(false) {}
  bool id :1;
} _TaskService_getTaskById_args__isset;

class TaskService_getTaskById_args {
 public:

  TaskService_getTaskById_args(const TaskService_getTaskById_args&) noexcept;
  TaskService_getTaskById_args& operator=(const TaskService_getTaskById_args&) noexcept;
  TaskService_getTaskById_args() noexcept
                               : id(0) {
  }

  virtual ~TaskService_getTaskById_args() noexcept;
  int32_t id;

  _TaskService_getTaskById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const TaskService_getTaskById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TaskService_getTaskById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskService_getTaskById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TaskService_getTaskById_pargs {
 public:


  virtual ~TaskService_getTaskById_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TaskService_getTaskById_result__isset {
  _TaskService_getTaskById_result__isset() : success(false) {}
  bool success :1;
} _TaskService_getTaskById_result__isset;

class TaskService_getTaskById_result {
 public:

  TaskService_getTaskById_result(const TaskService_getTaskById_result&);
  TaskService_getTaskById_result& operator=(const TaskService_getTaskById_result&);
  TaskService_getTaskById_result() noexcept {
  }

  virtual ~TaskService_getTaskById_result() noexcept;
  Task success;

  _TaskService_getTaskById_result__isset __isset;

  void __set_success(const Task& val);

  bool operator == (const TaskService_getTaskById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TaskService_getTaskById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskService_getTaskById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TaskService_getTaskById_presult__isset {
  _TaskService_getTaskById_presult__isset() : success(false) {}
  bool success :1;
} _TaskService_getTaskById_presult__isset;

class TaskService_getTaskById_presult {
 public:


  virtual ~TaskService_getTaskById_presult() noexcept;
  Task* success;

  _TaskService_getTaskById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TaskService_addTask_args__isset {
  _TaskService_addTask_args__isset() : t(false) {}
  bool t :1;
} _TaskService_addTask_args__isset;

class TaskService_addTask_args {
 public:

  TaskService_addTask_args(const TaskService_addTask_args&);
  TaskService_addTask_args& operator=(const TaskService_addTask_args&);
  TaskService_addTask_args() noexcept {
  }

  virtual ~TaskService_addTask_args() noexcept;
  Task t;

  _TaskService_addTask_args__isset __isset;

  void __set_t(const Task& val);

  bool operator == (const TaskService_addTask_args & rhs) const
  {
    if (!(t == rhs.t))
      return false;
    return true;
  }
  bool operator != (const TaskService_addTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskService_addTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TaskService_addTask_pargs {
 public:


  virtual ~TaskService_addTask_pargs() noexcept;
  const Task* t;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TaskService_addTask_result {
 public:

  TaskService_addTask_result(const TaskService_addTask_result&) noexcept;
  TaskService_addTask_result& operator=(const TaskService_addTask_result&) noexcept;
  TaskService_addTask_result() noexcept {
  }

  virtual ~TaskService_addTask_result() noexcept;

  bool operator == (const TaskService_addTask_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TaskService_addTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TaskService_addTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TaskService_addTask_presult {
 public:


  virtual ~TaskService_addTask_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TaskServiceClient : virtual public TaskServiceIf {
 public:
  TaskServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TaskServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTaskById(Task& _return, const int32_t id) override;
  void send_getTaskById(const int32_t id);
  void recv_getTaskById(Task& _return);
  void addTask(const Task& t) override;
  void send_addTask(const Task& t);
  void recv_addTask();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TaskServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TaskServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (TaskServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTaskById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TaskServiceProcessor(::std::shared_ptr<TaskServiceIf> iface) :
    iface_(iface) {
    processMap_["getTaskById"] = &TaskServiceProcessor::process_getTaskById;
    processMap_["addTask"] = &TaskServiceProcessor::process_addTask;
  }

  virtual ~TaskServiceProcessor() {}
};

class TaskServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TaskServiceProcessorFactory(const ::std::shared_ptr< TaskServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< TaskServiceIfFactory > handlerFactory_;
};

class TaskServiceMultiface : virtual public TaskServiceIf {
 public:
  TaskServiceMultiface(std::vector<std::shared_ptr<TaskServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TaskServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TaskServiceIf> > ifaces_;
  TaskServiceMultiface() {}
  void add(::std::shared_ptr<TaskServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getTaskById(Task& _return, const int32_t id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTaskById(_return, id);
    }
    ifaces_[i]->getTaskById(_return, id);
    return;
  }

  void addTask(const Task& t) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addTask(t);
    }
    ifaces_[i]->addTask(t);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TaskServiceConcurrentClient : virtual public TaskServiceIf {
 public:
  TaskServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TaskServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTaskById(Task& _return, const int32_t id) override;
  int32_t send_getTaskById(const int32_t id);
  void recv_getTaskById(Task& _return, const int32_t seqid);
  void addTask(const Task& t) override;
  int32_t send_addTask(const Task& t);
  void recv_addTask(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
