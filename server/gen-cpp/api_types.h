/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef api_TYPES_H
#define api_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace TaskService {

class Task;

typedef struct _Task__isset {
  _Task__isset() : title(false), description(false) {}
  bool title :1;
  bool description :1;
} _Task__isset;

class Task : public virtual ::apache::thrift::TBase {
 public:

  Task(const Task&);
  Task& operator=(const Task&);
  Task() noexcept
       : title(),
         description() {
  }

  virtual ~Task() noexcept;
  std::string title;
  std::string description;

  _Task__isset __isset;

  void __set_title(const std::string& val);

  void __set_description(const std::string& val);

  bool operator == (const Task & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const Task &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Task & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Task &a, Task &b);

std::ostream& operator<<(std::ostream& out, const Task& obj);

} // namespace

#endif
